Zones
    x Each instance of a runschema process can be a zone
    - Entities can migrate to a new zone via serialization to Redis
    x Runschema processes should be wrapped in an exception handler
    x Ctrl+C should shutdown gracefully (dumping first)

Refactoring
    - Get rid of as much global state as you can
        - Make it possible to run tests without polluting the entity space

Plugins
    - Define behaviors, actions, modes
        - Should be able to define dependencies?
    - Loaded at runtime
    - Reloadable?
        - or just reload the whole server
    - @before(tick) should be a thing... maybe

    ! @action should accept an optional second argument: an Event subclass
        - This event subclass is attached to the action and can be constructed instead of Event
        - The subclass defines witnesses

Registration
    - ???
    - Accounts have a username, password, list of controllable entities
    - The connection should have some state (account ID, entity logged in as)
        - So the client doesn't have to send entity ID with every command

Persistence
    x Fork, then dump a JSON list of entities
    x On start, check for a dump.json
        x If it exists, load it
        x Otherwise, create the world

Combat
    - Single letters
    - Hotkeys! (1234 etc)
    - Schedule actions for the next tick

Conversations
    - Modal
    - Mutes surroundings (?)
    - Broadcasts when engaged / disengaged
    - Should be able to leave at any time, Skyrim-style

Test items
    - A key that opens a door
    - A keycard bound to a particular owner
    - A bomb that, when used, counts down to 0 and explodes, damaging nearby stuff
    - Signs, books, walls you can write on/in

Modal interactions
    - Explore mode: arbitrary commands
    - Disambiguation mode
        x should return the entity to the previous mode
    - Conversation mode: preset convo options
    - Combat mode: scheduler based
        - or, mostly turn based with 20 sec forfeit?
    - Shop mode?

Instances
    - Copies of rooms, NPCs can be created for parties
    - Have a function that creates a list of entities and an instance start room
    - Store the entities in a redis list and tear them down when the party leaves / wins

Flags
    - is_dark (would this be better as a behavior?)
    - is_open (for containers)
    - is_closable "
    - is_lockable "
    - is_flexible (volume is sum of volume of contained objects)
    - is_visible (for stuff like spawners)
    - is_writable

Stuff to think about
    - names and capitalization
    - chairs, beds, vehicles(?)
    - stacks of objects / inventory management / gold
    - equipment
    - holding items
        - inventory is a closed container
        - held items go in an open container
    - need a room.unlink() for moving rooms

Frontend improvements
    - Purge old messages
    - Command history
